# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}


# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# polyfill ssh-copy-id for osx expects "user@machine"
function ssh-copy-id() {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

# create new tab in osx terminal
function new_tab() {
    TAB_NAME=$1
    COMMAND=$2
    osascript \
      -e "tell application \"Terminal\"" \
      -e "tell application \"System Events\" to keystroke \"t\" using {command down}" \
      -e "do script \"printf '\\\e]1;$TAB_NAME\\\a'; $COMMAND\" in front window" \
      -e "end tell" > /dev/null
}

# launch development for a repository
function launch_dev() {
  for REPO in "$@"
  do
    if [ $REPO = "jservices" ]; then
      new_tab "jservices" "cd ~/code/isocket/jservices; git pull && git submodule update && ./scripts/run.sh &"
    elif [ $REPO = "fovea" ]; then
      new_tab "fovea" "cd ~/code/isocket/fovea; nvm use && git pull && git submodule update && grunt watch &"
    elif [ $REPO = "iris" ]; then
      new_tab "iris" "cd ~/code/isocket/iris; nvm use && git pull && git submodule update && npm install && bower install && grunt watch &"
    elif [ $REPO = "sclera" ]; then
      new_tab "sclera" "cd ~/code/isocket/sclera; nvm use && git pull && git submodule update && npm install && bower install && grunt watch &"
    else
      echo "no repo config available for $REPO"
    fi
  done
}
