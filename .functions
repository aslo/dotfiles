# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}


# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# polyfill ssh-copy-id for osx expects "user@machine"
function ssh-copy-id() {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

# create new tab in osx terminal
function new_tab() {
    TAB_NAME=$1
    COMMAND=$2
    osascript \
      -e "tell application \"Terminal\"" \
      -e "tell application \"System Events\" to keystroke \"t\" using {command down}" \
      -e "do script \"printf '\\\e]1;$TAB_NAME\\\a'; $COMMAND\" in front window" \
      -e "end tell" > /dev/null
}

# send an osx system alert
function alert() {
  title=$1
  message=$2

  terminal-notifier -help >/dev/null 2>&1 || { echo >&2 "I require terminal-notifier but it is not installed. Try 'sudo gem install terminal-notifier' " ; return 1 ; }

  if [ -z "$message" ] && [ -z "$title" ]; then
    echo "Usage: 'alert [title] message'"
    return 1;
  fi

  if [ -z "$message" ]; then
    terminal-notifier -sound default -message "${title}" 
  else 
    terminal-notifier -sound default -message "${message}" -title "${title}"
  fi
}

